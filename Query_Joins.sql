Use sakila

/**List the number of films per category**/

SELECT
    c.name AS category_name,
    COUNT(*) AS number_of_films
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
GROUP BY c.category_id
ORDER BY number_of_films DESC;

/**Retrieve the store ID, city, and country for each store**/
SELECT 
    s.store_id,
    ci.city,
    co.country
FROM store s
JOIN address a    ON s.address_id = a.address_id
JOIN city ci      ON a.city_id = ci.city_id
JOIN country co   ON ci.country_id = co.country_id;

/**Calculate the total revenue generated by each store (in dollars)**/
SELECT 
    s.store_id,
    CONCAT('$', FORMAT(SUM(p.amount), 2)) AS total_revenue
FROM payment p
JOIN staff st ON p.staff_id = st.staff_id
JOIN store s  ON st.store_id = s.store_id
GROUP BY s.store_id
ORDER BY total_revenue DESC;

/**Determine the average running time of films for each category**/
SELECT 
    c.name AS category_name,
    ROUND(AVG(f.length), 2) AS avg_length_minutes
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f          ON fc.film_id = f.film_id
GROUP BY c.category_id
ORDER BY avg_length_minutes DESC;

--- **** BONUS ****--
/**Identify the film categories with the longest average running time**/
SELECT 
    c.name AS category_name,
    ROUND(AVG(f.length), 2) AS avg_length
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f          ON fc.film_id    = f.film_id
GROUP BY c.category_id, c.name
ORDER BY avg_length DESC;

/** Display the top 10 most frequently rented movies in descending order**/
SELECT
    f.title,
    COUNT(*) AS times_rented
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f      ON i.film_id      = f.film_id
GROUP BY f.film_id, f.title
ORDER BY times_rented DESC
LIMIT 10;

/**Determine if "Academy Dinosaur" can be rented from Store 1**/
SELECT 
    CASE WHEN COUNT(*) > 0 THEN 'Yes, it can be rented from Store 1'
         ELSE 'No, it cannot be rented from Store 1'
    END AS availability
FROM inventory i
JOIN film f 
   ON i.film_id = f.film_id
LEFT JOIN rental r 
   ON i.inventory_id = r.inventory_id
   AND r.return_date IS NULL  -- means it's still out
WHERE f.title = 'Academy Dinosaur'
  AND i.store_id = 1
  AND r.rental_id IS NULL;    -- only count copies not currently rented out

/** List of all distinct film titles with an “Available” / “NOT available” status**/
SELECT 
    f.title,
    CASE 
       WHEN IFNULL(MAX(i.inventory_id), 0) = 0 THEN 'NOT available'
       ELSE 'Available'
    END AS availability
FROM film f
LEFT JOIN inventory i 
       ON f.film_id = i.film_id
GROUP BY f.film_id, f.title
ORDER BY f.title;

/**expand the logic “currently available vs. out on rent,” but for simply “in inventory or not,” the above suffices***/
-- Creating a temporary table to break down the inventory counts--
CREATE TEMPORARY TABLE film_inventory
SELECT 
    film_id, 
    COUNT(*) AS total_inventory
FROM inventory
GROUP BY film_id
;
-- 2nd part of the temporary table --
CREATE TEMPORARY TABLE film_rentals
SELECT
    i.film_id,
    COUNT(r.rental_id) AS active_rentals
FROM inventory i
LEFT JOIN rental r
    ON i.inventory_id = r.inventory_id
    AND r.return_date IS NULL
GROUP BY i.film_id
;

/**3rd part of the temporary table and Combine everything with a join as I din in the excercise above**/
SELECT
    f.film_id,
    f.title,
    CASE
        WHEN fi.total_inventory IS NULL 
             OR fi.total_inventory = 0 
             THEN 'Not in inventory'
        WHEN fr.active_rentals = fi.total_inventory 
             THEN 'Out on rent'
        ELSE 'Available'
    END AS availability
FROM film f
LEFT JOIN film_inventory fi 
       ON f.film_id = fi.film_id
LEFT JOIN film_rentals fr 
       ON f.film_id = fr.film_id
ORDER BY f.title
;
